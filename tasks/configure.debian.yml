---

- name: "Configuring OpenSSH server"
  template:
    src: "{{ item }}"
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
    backup: yes
  with_first_found:
    - "inventory/host_files/{{ inventory_hostname }}/honzamach.accounts/sshd_config.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/sshd_config.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/sshd_config.j2"
    - "inventory/group_files/servers/honzamach.accounts/sshd_config.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers/honzamach.accounts/sshd_config.j2"
    - "sshd_config.{{ ansible_lsb['codename'] }}.j2"
    - "sshd_config.j2"
  notify:
    - Restart OpenSSH service
  when: hm_accounts__configure_ssh

- name: "Ensuring OpenSSH server is running and enabled at system start"
  service:
    name: "{{ hm_accounts__service_name }}"
    state: started
    enabled: yes

- name: "User 'root': Managing SSH directory"
  file:
    path: /root/.ssh
    owner: root
    group: root
    mode: 0700
    state: directory

- name: "User 'root': Managing SSH keys"
  template:
    src: "{{ item }}"
    dest: /root/.ssh/authorized_keys
    owner: root
    group: root
    mode: 0644
    backup: yes
  with_first_found:
    - "inventory/host_files/{{ inventory_hostname }}/honzamach.accounts/authorized_keys.root.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/authorized_keys.root.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/authorized_keys.root.j2"
    - "inventory/group_files/servers/honzamach.accounts/authorized_keys.root.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers/honzamach.accounts/authorized_keys.root.j2"
    - "authorized_keys.root.{{ ansible_lsb['codename'] }}.j2"
    - "authorized_keys.root.j2"

#-------------------------------------------------------------------------------

- include_tasks: _func.manage_account.debian.yml
  vars:
    ivar_user: "{{ outer_item }}"
    ivar_metadata:
      groups:
        - sudo
  loop: "{{ hm_accounts__admins }}"
  loop_control:
    loop_var: outer_item
    label: "Managing local user account for admin '{{ outer_item }}'"

- name: "Configuring sudo for local admin accounts"
  template:
    src: "{{ item }}"
    dest: /etc/sudoers
    owner: root
    group: root
    mode: 0440
    backup: yes
  with_first_found:
    - "inventory/host_files/{{ inventory_hostname }}/honzamach.accounts/sudoers.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/sudoers.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers_{{ msms_server_type }}/honzamach.accounts/sudoers.j2"
    - "inventory/group_files/servers/honzamach.accounts/sudoers.{{ ansible_lsb['codename'] }}.j2"
    - "inventory/group_files/servers/honzamach.accounts/sudoers.j2"
    - "sudoers.{{ ansible_lsb['codename'] }}.j2"
    - "sudoers.j2"
  when: hm_accounts__configure_sudo

- name: "Getting current members of the 'sudo' group"
  command: members sudo
  register: current_sudo_members
  changed_when: False

- debug: var=current_sudo_members
  tags:
    - debug

- name: "Setting fact - current 'sudo' group memberships"
  set_fact:
    current_sudo_member_list: "{{ current_sudo_members.stdout.split(' ') }}"

- debug: var=current_sudo_member_list
  tags:
    - debug

- name: "Removing extra users from 'sudo' group"
  command: "deluser {{ item }} sudo"
  loop: "{{ current_sudo_member_list }}"
  when: >
    item not in hm_accounts__admins and not
    (item in hm_accounts__users and 'groups' in hm_accounts__users[item] and 'sudo' in hm_accounts__users[item]['groups'])

#-------------------------------------------------------------------------------

- name: "Creating local user groups"
  group:
    name: "{{ item['key'] }}"
    state: present
  with_dict: "{{ hm_accounts__groups }}"

- include_tasks: _func.manage_account.debian.yml
  vars:
    ivar_user: "{{ outer_item['key'] }}"
    ivar_metadata: "{{ outer_item['value'] }}"
  with_dict: "{{ hm_accounts__users }}"
  loop_control:
    loop_var: outer_item
    label: "Managing local user account for regular user '{{ outer_item }}'"
